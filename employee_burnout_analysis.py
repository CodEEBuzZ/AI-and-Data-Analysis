# -*- coding: utf-8 -*-
"""Employee Burnout Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MjJaXu0it0zeBqAAG47bx6Z3vnri2GFu
"""

pip install pandas numpy matplotlib seaborn scikit-learn xgboost shap dash

import pandas as pd
df = pd.read_excel("/content/employee_burnout_analysis-AI 2.xlsx")

df

df.drop_duplicates(inplace=True)

df

df = pd.get_dummies(df, drop_first=True)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
df[['Designation', 'Mental Fatigue Score']] = scaler.fit_transform(df[['Designation', 'Mental Fatigue Score']])

import pandas as pd
import numpy as np
df = pd.read_excel("/content/employee_burnout_analysis-AI 2.xlsx")
print(df.info())
print(df.describe())
df['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})
df['Company Type'] = df['Company Type'].map({'Product': 0, 'Service': 1})
df['WFH Setup Available'] = df['WFH Setup Available'].map({'No': 0, 'Yes': 1})

from datetime import datetime
df['Tenure (Years)'] = (datetime.now() - pd.to_datetime(df['Date of Joining'])).dt.days / 365
df['Designation_Resource'] = df['Designation'] * df['Resource Allocation']
df['Mental_Resource'] = df['Mental Fatigue Score'] * df['Resource Allocation']
df.drop(['Employee ID', 'Date of Joining'], axis=1, inplace=True)

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()
sns.histplot(df['Burn Rate'], kde=True, bins=20, color='blue')
plt.title("Burn Rate Distribution")
plt.show()
sns.boxplot(x=pd.cut(df['Burn Rate'], bins=[0, 0.3, 0.7, 1], labels=['Low', 'Medium', 'High']),
            y='Mental Fatigue Score', data=df)
plt.title("Mental Fatigue Score by Burn Rate Level")
plt.show()

print(df.columns)

from sklearn.model_selection import train_test_split

# Ensure the target column exists and has no NaNs
assert 'Burn Rate' in df.columns, "Column 'Burn Rate' not found in DataFrame!"
df['Burn Rate'] = pd.to_numeric(df['Burn Rate'], errors='coerce')
df['Burn Rate'].fillna(df['Burn Rate'].median(), inplace=True)

# Define features and target
X = df.drop('Burn Rate', axis=1)
y = df['Burn Rate']

# Ensure all features are numeric
X = pd.get_dummies(X, drop_first=True)

# Confirm shapes
print(f"Features shape: {X.shape}, Target shape: {y.shape}")

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print(f"Train size: {X_train.shape[0]}, Test size: {X_test.shape[0]}")

from sklearn.model_selection import train_test_split
X = df.drop('Burn Rate', axis=1)
y = df['Burn Rate']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"R-Squared Score: {r2}")

from flask import Flask, request, jsonify
import joblib
joblib.dump(model, "burnout_model.pkl")
app = Flask(__name__)
loaded_model = joblib.load("burnout_model.pkl")

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    prediction = loaded_model.predict([data['features']])
    return jsonify({'burnout_rate': prediction[0]})

if __name__ == "__main__":
    app.run(debug=True)

pip install streamlit

import streamlit as st
import pandas as pd
import joblib
model = joblib.load("burnout_model.pkl")

st.title("Burnout Prediction Dashboard")
features = []
for col in X.columns:
    val = st.number_input(f"Enter {col}", value=0.0)
    features.append(val)
if st.button("Predict Burnout Rate"):
    prediction = model.predict([features])
    st.write(f"Predicted Burnout Rate: {prediction[0]:.2f}")

df['Burn Rate Category'] = pd.cut(df['Burn Rate'], bins=[0, 0.3, 0.7, 1], labels=['Low', 'Medium', 'High'])
plt.figure(figsize=(10, 6))
sns.boxplot(x='Burn Rate Category', y='Mental Fatigue Score', data=df, palette='Set2')
plt.title("Mental Fatigue Score by Burn Rate Category")
plt.show()
plt.figure(figsize=(10, 6))
sns.boxplot(x='Burn Rate Category', y='Tenure (Years)', data=df, palette='Set2')
plt.title("Tenure by Burn Rate Category")
plt.show()

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
feature_importance = model.feature_importances_
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importance, y=X.columns)
plt.title("Feature Importance")
plt.show()

plt.figure(figsize=(10, 6))
sns.regplot(x='Mental Fatigue Score', y='Burn Rate', data=df, scatter_kws={'color': 'blue'}, line_kws={'color': 'red'})
plt.title("Mental Fatigue Score vs Burn Rate with Regression Line")
plt.show()

heatmap_data = df.pivot_table(values='Burn Rate', index='WFH Setup Available', columns='Company Type', aggfunc='mean')

plt.figure(figsize=(8, 6))
sns.heatmap(heatmap_data, annot=True, cmap='YlGnBu')
plt.title("Burn Rate by WFH Setup and Company Type")
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['Burn Rate'], kde=True, color='purple', bins=30)
plt.title("Distribution of Burn Rate")
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Tenure (Years)', y='Burn Rate', data=df, color='green')
plt.title("Tenure vs Burn Rate")
plt.show()
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Designation_Resource', y='Burn Rate', data=df, color='orange')
plt.title("Designation_Resource vs Burn Rate")
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Company Type', y='Mental Fatigue Score', data=df, palette='Set1')
plt.title("Mental Fatigue Score by Company Type")
plt.show()

y_pred = model.predict(X_test)
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([0, 1], [0, 1], 'r--', label='Perfect Prediction')
plt.title("Actual vs Predicted Burn Rate")
plt.xlabel("Actual Burn Rate")
plt.ylabel("Predicted Burn Rate")
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Mental Fatigue Score', y='Burn Rate', hue='Tenure (Years)', data=df, palette='viridis')
plt.title("Mental Fatigue vs Burn Rate Across Different Tenure")
plt.show()

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")

from sklearn.model_selection import cross_val_score

scores = cross_val_score(model, X, y, cv=5, scoring='neg_mean_absolute_error')
print(f"Cross-validated MAE scores: {scores}")
print(f"Average Cross-validated MAE: {scores.mean()}")